# vi: ft=sh

#xochitl_loc="/home/root/.local/share/remarkable/xochitl"
xochitl_loc="./xochitl"

function create_dir_metadata() {
	#creates metadata for new directory under $1 with name $2 and uuid $3 in directory $4
	cp dir_metadata.txt $4/$3.metadata
	sed -i -e "s|PARENT_UUID|\"$1\"|" -e "s|DIR_NAME|\"$2\"|" $4/$3.metadata
}

function create_dir_content() {
	#creates content for new rm directory $1 in directory location $2
	echo "{}" > $2/$1.content
}

function create_doc_metadata() {
	#creates metadata and pagedata files for pdf $1 under parent $2 with visible name $3 in directory $4
	mod_time=`date +%s`
	cp -v doc_metadata.txt $4/$1.metadata
	sed -i -e "s/PARENT_NAME/$2/" -e "s/DOC_NAME/$3/" -e "s/MOD_TIME/$mod_time/" $4/$1.metadata
}

function create_doc_content() {
	#creates content files for pdf $1 in directory $2
	new_uuid page_uuid
	size_in_bytes=`stat -c %s $2/$1.pdf`
	cp -v doc_content.txt $2/$1.content
	sed -i -e "s/PAGE_UUID/$page_uuid/" -e "s/SIZE_IN_BYTES/$size_in_bytes/" $2/$1.content
}

function find_uuid() {
	#finds uuid of type $2 with name $1 and stores to $3

	local  __resultvar=$3

    #IFS=$'\n'
	#local dir_arr=($(echo "$1" | sed -e 's|/|\n|g' | awk -F '\n' '{ print $1 }'))
	#local name="${dir_arr[-1]}"
	local name=`basename $1`

	for filename in $xochitl_loc/*.metadata ; do
		get_name $filename doc_name

		if [[ $doc_name == $name ]]; then
			get_type $filename doc_type
			if [[ $doc_type == $2 ]]; then
				echo `basename $filename .metadata`
				get_parent_uuid $filename parent_uuid
				check_path `dirname $1` $parent_uuid path_exists
				echo $path_exists
				if [[ $path_exists == true ]]; then
					uuid=`basename $filename .metadata`
					break
				fi
			fi
		fi
	done

    if [[ "$__resultvar" ]]; then
        eval $__resultvar="'$uuid'"
    else
        echo "$uuid"
    fi
}

function get_name() {
	local __resultvar=$2
	doc_name=`sed -e 's/    //g' -e 's/\"//g' -e 's/: /:/g' $1 | awk -F '[:,]' '{if ($1 == "visibleName") print $2;}'`
    if [[ "$__resultvar" ]]; then
        eval $__resultvar="'$doc_name'"
    else
        echo "$doc_name"
    fi
}

function get_type() {
	local __resultvar=$2
	doc_type=`sed -e 's/    //g' -e 's/\"//g' -e 's/: /:/g' $1 | awk -F '[:,]' '{if ($1 == "type") print $2;}'`
    if [[ "$__resultvar" ]]; then
        eval $__resultvar="'$doc_type'"
    else
        echo "$doc_type"
    fi
}

function get_parent_uuid() {
	local __resultvar=$2
	parent_uuid=`sed -e 's/    //g' -e 's/\"//g' -e 's/: /:/g' $1 | awk -F '[:,]' '{if ($1 == "parent") print $2;}'`
	if [[ "$__resultvar" ]]; then
		eval $__resultvar="'$parent_uuid'"
	else
		echo "$parent_uuid"
	fi

}

function check_path() {
	#checks that path $1 exists recursively starting from a node with parent uuid $2

	local  __resultvar=$3
	local leaf_name=`basename $1`
	local parent_uuid=$2

	local root_dir=`echo $1 | awk -F '/' '{print $2}'`

	local filename=$xochitl_loc/$parent_uuid.metadata
	get_name $filename parent_name
	get_parent_uuid $filename new_parent_uuid

	if [[ $new_parent_uuid == "" && $leaf_name == $root_dir ]]; then
		local result=true
	elif [[ $parent_name == $leaf_name ]]; then
		# recurse
		check_path `dirname $1` $new_parent_uuid $result
	else
		local result=false
	fi

	if [[ "$__resultvar" ]]; then
		eval $__resultvar="'$result'"
	else
		echo "$result"
	fi

}

function new_uuid() {
	local  __resultvar=$1
    local  uuid=`cat /proc/sys/kernel/random/uuid`
    if [[ "$__resultvar" ]]; then
        eval $__resultvar="'$uuid'"
    else
        echo "$uuid"
    fi
}

function rm_mkdir() {
	local parent_uuid
	local dir_uuid
    IFS=$'\n'
	dir_arr=($(echo "$1" | sed -e 's|/|\n|g' | awk -F '\n' -v q='"' '{ print $1 }'))
	for ((i=0; i<${#dir_arr[@]}; i++)) ; do
		if [[ $i != 0 ]]; then
			parent=${dir_arr[$i-1]}
			find_uuid $parent "dir" parent_uuid
		fi
		find_uuid ${dir_arr[$i]} "dir" dir_uuid
		if [[ $dir_uuid == "" ]]; then
			new_uuid dir_uuid
			create_dir_metadata "$parent_uuid" "${dir_arr[$i]}" $dir_uuid $xochitl_loc
			create_dir_content $dir_uuid $xochitl_loc
		fi
	done
}

