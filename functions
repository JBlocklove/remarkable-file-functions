# vi: ft=sh

xochitl_loc="/home/root/.local/share/remarkable/xochitl"

script_dir="$( cd -- "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

function create_dir_metadata() {
	#creates metadata for new remarkable directory under parent $1 with name $2 and uuid $3 in linux directory $4 (xochitl_loc, generally)
	local parent_uuid=$1
	local dir_name=$2
	local dir_uuid=$3
	local location=$4


	cp -v $script_dir/dir_metadata.txt $location/$dir_uuid.metadata
	sed -i -e "s/PARENT_UUID/$parent_uuid/" -e "s/DIR_NAME/$dir_name/" $location/$dir_uuid.metadata
}

function create_dir_content() {
	#creates content for new remarkable directory $1 in linux location $2
	local dir_uuid=$1
	local location=$2
	echo "{}" > $location/$dir_uuid.content
}

function create_doc_metadata() {
	#creates metadata and pagedata files for pdf $1 under parent $2 with visible name $3 in directory $4
	local pdf_uuid=$1
	local parent_uuid=$2
	local doc_name=$3
	local location=$4

	local mod_time=$(date +%s)

	cp -v $script_dir/doc_metadata.txt $4/$1.metadata
	sed -i -e "s/PARENT_NAME/$parent_uuid/" -e "s/DOC_NAME/$doc_name/" -e "s/MOD_TIME/$mod_time/" $location/$pdf_uuid.metadata
}

function create_doc_content() {
	#creates content files for pdf $1 in directory $2 with $3 pages
	local pdf_uuid=$1
	local page_count=$2
	local location=$3

	local page_uuid=$(new_uuid)
	local size_in_bytes=$(stat -c %s $location/$pdf_uuid.pdf)

	cp -v $script_dir/doc_content.txt $location/$pdf_uuid.content
	sed -i -e "s/PAGE_UUID/$page_uuid/" -e "s/SIZE_IN_BYTES/$size_in_bytes/" -e "s/PAGE_COUNT/$page_count/" $location/$pdf_uuid.content
}

function find_uuid() {
	#finds uuid of type $2 with name $1 and stores to $3

	local  __resultvar=$3

	local name=$(basename "$1")

	for filename in $xochitl_loc/*.metadata ; do
		local doc_name=$(get_name $filename)

		if [[ $doc_name == $name ]]; then
			local doc_type=$(get_type $filename)
			if [[ $doc_type == $2 ]]; then
				local parent_uuid=$(get_parent_uuid $filename)
				if [[ $parent_uuid != "trash" ]]; then
					local path_exists=$(check_path $(dirname "$1") $parent_uuid)
					if [[ $path_exists == true ]]; then
						local uuid=$(basename $filename .metadata)
						break
					fi
				fi
			fi
		fi
	done

    if [[ "$__resultvar" ]]; then
        eval $__resultvar="'$uuid'"
    else
        echo "$uuid"
    fi
}

function get_name() {
	local __resultvar=$2
	local doc_name=$(sed -e 's/    //g' -e 's/\"//g' -e 's/: /:/g' $1 | awk -F '[:,]' '{if ($1 == "visibleName") print $2;}')
    if [[ "$__resultvar" ]]; then
        eval $__resultvar="'$doc_name'"
    else
        echo "$doc_name"
    fi
}

function get_type() {
	local __resultvar=$2
	local doc_type=$(sed -e 's/    //g' -e 's/\"//g' -e 's/: /:/g' $1 | awk -F '[:,]' '{if ($1 == "type") print $2;}')
    if [[ "$__resultvar" ]]; then
        eval $__resultvar="'$doc_type'"
    else
        echo "$doc_type"
    fi
}

function get_parent_uuid() {
	local __resultvar=$2
	local parent_uuid=$(sed -e 's/    //g' -e 's/\"//g' -e 's/: /:/g' $1 | awk -F '[:,]' '{if ($1 == "parent") print $2;}')
	if [[ "$__resultvar" ]]; then
		eval $__resultvar="'$parent_uuid'"
	else
		echo "$parent_uuid"
	fi

}

function check_path() {
	#checks that path $1 exists recursively starting from a node with parent uuid $2

	local  __resultvar=$3
	local leaf_name="$(basename $1)"
	local parent_uuid=$2

	local root_dir=$(echo $1 | awk -F '/' '{print $2}')

	if [[ -z $parent_uuid  && $leaf_name == "/" ]]; then # Special case is passed the root directory
		local result=true
	else
		local filename=$xochitl_loc/$parent_uuid.metadata
		local parent_name=$(get_name $filename)
		local new_parent_uuid=$(get_parent_uuid $filename)

		if [[ $new_parent_uuid == "trash" ]]; then
			local result=false
		elif [[ $new_parent_uuid == "" && $leaf_name == $root_dir ]]; then
			local result=true
		elif [[ $parent_name == $leaf_name ]]; then
			# recurse
			local result=$(check_path "$(dirname $1)" $new_parent_uuid)
		else
			local result=false
		fi
	fi


	if [[ "$__resultvar" ]]; then
		eval $__resultvar="'$result'"
	else
		echo "$result"
	fi

}

function new_uuid() {
	local  __resultvar=$1
	local  uuid=$(cat /proc/sys/kernel/random/uuid)
    if [[ "$__resultvar" ]]; then
        eval $__resultvar="'$uuid'"
    else
        echo "$uuid"
    fi
}

function rm_mkdir() {
	# makes directory $1 if it doesn't exist
	# returns the uuid of the new directory, or the one already at that location if it exists

	local  __resultvar=$2

	local num_fields=$(echo $1 | awk -F '/' '{print NF}')
	local print_string='{print '
	for ((i=0; i<$num_fields-1; i++)) ; do
		local print_val=$((i+2))
		local print_string=${print_string}\"/\"\$${print_val}
		local dir=$(echo $1 | awk -F '/' "$print_string}")
		local dir_uuid=$(find_uuid "$dir" "CollectionType")
		if [[ $dir_uuid == "" ]]; then
			local dir_uuid=$(new_uuid)
			create_dir_metadata "$parent_uuid" "$(basename "$dir")" $dir_uuid $xochitl_loc
			create_dir_content $dir_uuid $xochitl_loc
		fi
		local parent_uuid=$dir_uuid
	done

	if [[ "$__resultvar" ]]; then
		eval $__resultvar="'$dir_uuid'"
	else
		echo "$dir_uuid"
	fi
}
